{"version":3,"file":"fundamentals.test.js","sourceRoot":"","sources":["../../../src/test/api/fundamentals.test.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\n\nimport { expect } from \"chai\";\nimport dotenv from \"dotenv\";\n\nimport { CompanyNewsRequest, SymbolLookup } from \"../../api/fundamentals/interface\";\nimport FinnhubAPI from \"../../index\";\n\ndotenv.config();\nconst finnHubKey = (process && process.env.FINNHUB_KEY) || \"\";\nconsole.log(\"finnHubKey\", finnHubKey);\n\nconst finnhubAPI = new FinnhubAPI(finnHubKey);\nconst symbol = \"AAPL\";\n\n/**\n * https://finnhub.io/docs/api/symbol-search\n */\ndescribe(\"Symbol lookup\", () => {\n  it(\"Query for google and expect result as in docs \", async () => {\n    const expectedRes: SymbolLookup = {\n      count: 12,\n      result: [\n        {\n          description: \"GLOBAL X MSCI PORTUGAL ETF\",\n          displaySymbol: \"PGAL\",\n          symbol: \"PGAL\",\n          type: \"ETP\",\n        },\n        {\n          description: \"SHANDONG MOLONG PETROLEUM-H\",\n          displaySymbol: \"SHANF\",\n          symbol: \"SHANF\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"ICMTRADER  Google Inc\",\n          displaySymbol: \"GOOGL/USD\",\n          symbol: \"ICMTRADER:152\",\n          type: \"US Equities (CFDs)\",\n        },\n        {\n          description: \"GOLD BOND GROUP LTD/THE\",\n          displaySymbol: \"GOLD.TA\",\n          symbol: \"GOLD.TA\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"SDM GROUP HOLDINGS LIMITED\",\n          displaySymbol: \"8363.HK\",\n          symbol: \"8363.HK\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"GLOBAL X MSCI PORTUGAL ETF\",\n          displaySymbol: \"4GXV.BE\",\n          symbol: \"4GXV.BE\",\n          type: \"ETP\",\n        },\n        {\n          description: \"SHANDONG MOLONG PETROLEUM-A\",\n          displaySymbol: \"002490.SZ\",\n          symbol: \"002490.SZ\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"SHANDONG MOLONG PETROLEUM-H\",\n          displaySymbol: \"PXI.F\",\n          symbol: \"PXI.F\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"BRD-GROUPE SOCIETE GENERALE\",\n          displaySymbol: \"0KVH.L\",\n          symbol: \"0KVH.L\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"XINJIANG GUOTONG PIPELINE-A\",\n          displaySymbol: \"002205.SZ\",\n          symbol: \"002205.SZ\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"SHANDONG MOLONG PETROLEUM-H\",\n          displaySymbol: \"PXI.MU\",\n          symbol: \"PXI.MU\",\n          type: \"Common Stock\",\n        },\n        {\n          description: \"SHANDONG MOLONG PETROLEUM-H\",\n          displaySymbol: \"PXI.SG\",\n          symbol: \"PXI.SG\",\n          type: \"Common Stock\",\n        },\n      ],\n    };\n    const res = await finnhubAPI.symbolLookup(\"google\");\n\n    // TODO: Find a better way to compare these objects\n    expect(res?.count).equal(expectedRes.count);\n  });\n\n  it(\"Query for nothing and expect a very big object of size 7218\", async () => {\n    const expectedSize = 7218;\n    const res = await finnhubAPI.symbolLookup();\n    expect(res?.count).equal(expectedSize);\n  });\n\n  it(\"Query for empty string and expect a very big object of size 7218\", async () => {\n    const expectedSize = 7218;\n    const res = await finnhubAPI.symbolLookup(\"\");\n    expect(res?.count).equal(expectedSize);\n  });\n});\n\ndescribe(\"Company Profile2\", () => {\n  it(\"Should get Company Profile for symbol = \" + symbol, async () => {\n    const companyProfile = await finnhubAPI.companyProfile2({ symbol });\n    expect(companyProfile?.country).not.equal(\"\");\n  });\n});\n\ndescribe(\"Market News\", () => {\n  it(\"Should return market news only for forex category\", async () => {\n    const res = await finnhubAPI.marketNews({ category: \"forex\" });\n    res?.every((news) => expect(news).to.have.property(\"category\", \"forex\"));\n  });\n});\n\ndescribe(\"Company News\", () => {\n  it(\"Should return news only for 1st April for \" + symbol, async () => {\n    const req: CompanyNewsRequest = {\n      symbol,\n      from: new Date(\"2021-04-01\"),\n      to: new Date(\"2021-04-01\"),\n    };\n    const res = await finnhubAPI.companyNews(req);\n\n    res?.every((news) => expect(news).to.have.property(\"related\", symbol));\n  });\n});\n\ndescribe(\"News Sentiment\", () => {\n  it(\"Should return news only for \" + symbol, async () => {\n    const res = await finnhubAPI.newsSentiment(symbol);\n    expect(res).to.have.property(\"symbol\", symbol);\n  });\n});\n\ndescribe(\"Peers\", () => {\n  it(\"should get Company peers \" + symbol, async () => {\n    const peers = await finnhubAPI.peers(symbol);\n    expect(peers?.length).greaterThan(0);\n  });\n});\n\ndescribe(\"Basic Financials\", () => {\n  it(\"should get Basic Financials for \" + symbol, async () => {\n    const basicFinancialsRes = await finnhubAPI.basicFinancials({\n      symbol,\n      metric: \"all\",\n    });\n    expect(basicFinancialsRes?.symbol).to.be.equal(symbol);\n  });\n});\n\ndescribe(\"Insider Financials\", () => {\n  it(`should get Insider Financials for ${symbol}`, async () => {\n    const insiderTransactionRes = await finnhubAPI.insiderTransactions({\n      symbol,\n    });\n    expect(insiderTransactionRes?.symbol).to.be.equal(symbol);\n  });\n});\n"]}