"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinnhubWS = exports.FinnhubWSEvents = void 0;
var events_1 = require("events");
var ws_1 = __importDefault(require("ws"));
var config_1 = require("../config");
var checkIfMarketIsOpen_1 = require("../utils/checkIfMarketIsOpen");
var log_1 = require("../utils/log");
var text_utils_1 = __importDefault(require("../utils/text.utils"));
/**
 * Finnhub websocket events
 */
var FinnhubWSEvents;
(function (FinnhubWSEvents) {
    /**
     * { symbol, date, close, volume? }
     */
    FinnhubWSEvents["onData"] = "onData";
    /**
     * true / false
     */
    FinnhubWSEvents["onReady"] = "onReady";
    /**
     * new Error()
     */
    FinnhubWSEvents["onError"] = "onError";
})(FinnhubWSEvents = exports.FinnhubWSEvents || (exports.FinnhubWSEvents = {}));
/**
 * @Websocket
 * Stream real-time trades for US stocks, forex and crypto.
 * @see https://finnhub.io/docs/api#websocket-price
 */
var FinnhubWS = /** @class */ (function (_super) {
    __extends(FinnhubWS, _super);
    function FinnhubWS(token) {
        var _this = _super.call(this) || this;
        _this.socket = null;
        _this.symbols = [];
        _this.token = config_1.FINNHUB_KEY;
        if (token) {
            _this.token = token;
        }
        _this.config();
        return _this;
    }
    /**
     * config
     */
    FinnhubWS.prototype.config = function () {
        var self = this;
        if (config_1.TZ_ON) {
            if (checkIfMarketIsOpen_1.checkIfMarketIsOpen()) {
                return self.init();
            }
            else {
                log_1.log("Market is closed cannot subscribe to market data");
                // infinity loop
                return setTimeout(function () {
                    log_1.log("FinnhubIO.config heartbeat");
                    self.config();
                }, 5000);
            }
        }
        self.init();
    };
    /**
     * init
     */
    FinnhubWS.prototype.init = function () {
        var _this = this;
        var self = this;
        var token = self.token;
        // Emulate for test
        if (process.env.NODE_ENV === "test") {
            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    self.emit(FinnhubWSEvents.onReady, true);
                    return [2 /*return*/];
                });
            }); }, 3000);
            return;
        }
        log_1.log("FinnhubIO.init startup", (token || "").slice(0, 5));
        this.socket = new ws_1.default("wss://ws.finnhub.io?token=" + token);
        this.socket.on("open", function () {
            self.emit(FinnhubWSEvents.onReady, true);
        });
        this.socket.on("error", function (error) {
            log_1.log("on error connecting socket", error);
            self.emit(FinnhubWSEvents.onError, error);
            // setTimeout(() => self.config(), 2000);
            return;
        });
        this.socket.on("message", function (data) {
            // @ts-ignore
            var parsedData = text_utils_1.default(data);
            if (!parsedData) {
                return;
            }
            if (parsedData && parsedData.data && parsedData.data[0]) {
                var priceItem = parsedData.data[0];
                var symbol = priceItem.s;
                var dataToSend = {
                    close: priceItem.p,
                    date: new Date(priceItem.t),
                    symbol: priceItem.s,
                    volume: +priceItem.v,
                };
                var topicSymbol = symbol;
                log_1.log(topicSymbol, dataToSend.close);
                self.emit(FinnhubWSEvents.onData, dataToSend);
            }
        });
    };
    /**
     * Add symbol
     * @param symbol: string
     * @returns boolean
     */
    FinnhubWS.prototype.addSymbol = function (symbol) {
        log_1.log("addSymbol", symbol);
        var self = this;
        // If test
        if (symbol === "TEST") {
            setTimeout(function () {
                var dataToSend = {
                    close: 1000,
                    date: new Date(),
                    symbol: "STQ",
                    volume: 0,
                };
                self.emit(FinnhubWSEvents.onData, dataToSend);
            }, 2000);
            return true;
        }
        if (!this.socket) {
            return false;
        }
        try {
            var isExist = this.symbols.includes(symbol);
            if (isExist) {
                return false;
            }
            // Add symbol
            // Request market data for this symbol
            this.symbols.push(symbol);
            this.socket.send(JSON.stringify({ type: "subscribe", symbol: symbol }));
            log_1.log("Added symbol", symbol);
            return true;
        }
        catch (error) {
            log_1.log("AddSybols ", error);
            return false;
        }
    };
    /**
     * Removes symbol from subscription list
     * @param symbol
     */
    FinnhubWS.prototype.removeSymbol = function (symbol) {
        try {
            var isExist = this.symbols.includes(symbol);
            if (isExist) {
                // Request unsubscribe market data for this symbol
                this.symbols = this.symbols.filter(function (item) { return item !== symbol; });
                this.socket.send(JSON.stringify({ type: "unsubscribe", symbol: symbol }));
                log_1.log("new symbols are -------------------------->", this.symbols);
                return true;
            }
            return false;
        }
        catch (error) {
            log_1.log("Error removing symbol", error);
            return false;
        }
    };
    return FinnhubWS;
}(events_1.EventEmitter));
exports.FinnhubWS = FinnhubWS;
exports.default = FinnhubWS;
//# sourceMappingURL=index.js.map