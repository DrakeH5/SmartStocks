{"version":3,"file":"tick.js","sourceRoot":"","sources":["../../src/api/tick.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAA4B;AAC5B,kDAA4B;AAUf,QAAA,WAAW,GAAG,UAAO,IAAiB;;;;;gBACzC,KAAqD,IAAI,KAAnC,EAAhB,GAAG,mBAAG,IAAI,IAAI,EAAE,KAAA,EAAE,KAA6B,IAAI,OAAlB,EAAf,MAAM,mBAAG,MAAM,KAAA,EAAE,OAAO,GAAK,IAAI,QAAT,CAAU;gBAE5D,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,IAAI,GAAG,gBAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBAGxC,MAAM,GAAG;oBACb,MAAM,QAAA;oBACN,KAAK,OAAA;oBACL,IAAI,MAAA;iBACL,CAAC;;;;gBAGc,qBAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE;wBAChD,MAAM,EAAE,KAAK;wBACb,MAAM,QAAA;qBACP,CAAC,EAAA;;gBAHI,KAAK,GAAG,SAGZ;gBAEI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC;gBAGf,qBAAM,mBAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAA;;gBAAvC,QAAQ,GAAG,SAA4B;gBAEvC,YAAY,GAAe,QAAQ,CAAC,GAAG,CAAC,UAAC,GAAG;oBAChD,OAAO;wBACL,MAAM,QAAA;wBACN,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;wBAC9B,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;wBAC1B,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;qBAC7B,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,sBAAO,YAAY,EAAC;;;gBAEpB,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,OAAK,IAAI,OAAK,CAAC,OAAO,CAAC,CAAC;gBAC7D,sBAAO,EAAE,EAAC;;;;KAEb,CAAC","sourcesContent":["import csv from \"csvtojson\";\nimport moment from \"moment\";\nimport FinnhubAPI from \".\";\nimport { TickData } from \"../interface\";\n\ninterface GetTickData {\n  date: Date;\n  symbol: string;\n  context: FinnhubAPI;\n}\n\nexport const getTickData = async (args: GetTickData): Promise<TickData[]> => {\n  const { date: day = new Date(), symbol = \"AAPL\", context } = args;\n\n  const token = context.token;\n  const date = moment(day).format(\"YYYY-MM-DD\");\n\n  // https://finnhub.io/api/v1/stock/tick?symbol=AAPL&date=2020-03-25&token=\n  const params = {\n    symbol,\n    token,\n    date,\n  };\n\n  try {\n    const ticks = await context.api.get(`stock/tick`, {\n      method: \"GET\",\n      params,\n    });\n\n    const data: string = ticks.data;\n\n    // tslint:disable-next-line\n    const jsonData = await csv().fromString(data);\n\n    const formatedData: TickData[] = jsonData.map((jsD) => {\n      return {\n        symbol,\n        date: new Date(+jsD.timestamp),\n        close: Math.abs(jsD.close),\n        volume: Math.abs(jsD.volume),\n      };\n    });\n\n    return formatedData;\n  } catch (error) {\n    console.log(\"error getting candles\", error && error.message);\n    return [];\n  }\n};\n"]}