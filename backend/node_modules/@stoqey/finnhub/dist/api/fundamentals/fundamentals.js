"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Fundamentals = /** @class */ (function () {
    function Fundamentals(context) {
        var _this = this;
        /**
         * Symbol Lookup - https://finnhub.io/docs/api/symbol-search
         * Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.
         * @param query Query text can be symbol, name, isin, or cusip.
         * @returns {SymbolLookup | null}
         */
        this.symbolLookup = function (query) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, symbolLookupResponse, symbolLookup, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            q: query,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("search", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        symbolLookupResponse = _a.sent();
                        symbolLookup = symbolLookupResponse.data;
                        return [2 /*return*/, symbolLookup];
                    case 3:
                        error_1 = _a.sent();
                        console.log("error symbol lookup", error_1 && error_1.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Company Profile 2 - https://finnhub.io/docs/api/company-profile2
         * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of Company Profile.
         * @param args @type {CompanyProfile2Request}
         * @returns {CompanyProfile2 | null}
         */
        this.companyProfile2 = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, profile, profileData, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: args.symbol,
                            isin: args.isin,
                            cusip: args.cusip,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("stock/profile2", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        profile = _a.sent();
                        profileData = profile.data;
                        return [2 /*return*/, profileData];
                    case 3:
                        error_2 = _a.sent();
                        console.log("error getting company profile", error_2 && error_2.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Market News - https://finnhub.io/docs/api/market-news
         * Get latest market news.
         * @param args @type {MarketNewsRequest}
         * @returns {MarketNews | null}
         */
        this.marketNews = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, marketNewsRes, marketNews, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            category: args.category,
                            minId: args.minId,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("news", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        marketNewsRes = _a.sent();
                        marketNews = marketNewsRes.data;
                        return [2 /*return*/, marketNews];
                    case 3:
                        error_3 = _a.sent();
                        console.log("error getting market news", error_3 && error_3.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Company News - https://finnhub.io/docs/api/company-news
         * List latest company news by symbol. This endpoint is only available for North American companies.
         * @param args @type {CompanyNewsRequest}
         * @returns {CompanyNews | null}
         */
        this.companyNews = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, companyNewsRes, companyNews, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: args.symbol,
                            from: args.from.toISOString().split("T")[0],
                            to: args.to.toISOString().split("T")[0],
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("company-news", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        companyNewsRes = _a.sent();
                        companyNews = companyNewsRes.data;
                        return [2 /*return*/, companyNews];
                    case 3:
                        error_4 = _a.sent();
                        console.log("error getting market news", error_4 && error_4.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * News Sentiment - https://finnhub.io/docs/api/news-sentiment
         * Get company's news sentiment and statistics. This endpoint is only available for US companies.
         * @param symbol
         * @returns {NewsSentiment | null}
         */
        this.newsSentiment = function (symbol) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, newsSentimentRes, newsSentiment, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: symbol,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("news-sentiment", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        newsSentimentRes = _a.sent();
                        newsSentiment = newsSentimentRes.data;
                        return [2 /*return*/, newsSentiment];
                    case 3:
                        error_5 = _a.sent();
                        console.log("error getting news sentiment", error_5 && error_5.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Peers - https://finnhub.io/docs/api/company-peers
         * Get company peers. Return a list of peers in the same country and GICS sub-industry
         * @param symbol Symbol of the company
         * @returns Array of peers' symbol.
         */
        this.peers = function (symbol) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, peers, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: symbol,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("stock/peers", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        peers = (_a.sent()).data;
                        return [2 /*return*/, peers];
                    case 3:
                        error_6 = _a.sent();
                        console.log("error getting peers", error_6 && error_6.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Basic Financials - https://finnhub.io/docs/api/company-basic-financials
         * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
         * @param args @type {BasicFinancialsRequest}
         * @returns {BasicFinancials}
         */
        this.basicFinancials = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, basicFinancialsRes, error_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: args.symbol,
                            metric: args.metric,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("stock/metric", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        basicFinancialsRes = _a.sent();
                        return [2 /*return*/, basicFinancialsRes.data];
                    case 3:
                        error_7 = _a.sent();
                        console.log("error getting basic financials", error_7 && error_7.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Insider Transactions - https://finnhub.io/docs/api/insider-transactions
         * Company insider transactions data sourced from Form 3,4,5. This endpoint only covers US companies at the moment.
         * Limit to 100 transactions per API call.
         * @param args @type {InsiderTransactionRequest}
         * @returns {InsiderTransaction}
         */
        this.insiderTransactions = function (args) { return __awaiter(_this, void 0, void 0, function () {
            var token, params, insiderTransactionRes, error_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.ctx.token;
                        params = {
                            symbol: args.symbol,
                            from: args.from,
                            to: args.to,
                            token: token,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ctx.api.get("stock/insider-transactions", {
                                method: "GET",
                                params: params,
                            })];
                    case 2:
                        insiderTransactionRes = _a.sent();
                        return [2 /*return*/, insiderTransactionRes.data];
                    case 3:
                        error_8 = _a.sent();
                        console.log("error getting insider transactions", error_8 && error_8.message);
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this.ctx = context;
    }
    return Fundamentals;
}());
exports.default = Fundamentals;
//# sourceMappingURL=fundamentals.js.map