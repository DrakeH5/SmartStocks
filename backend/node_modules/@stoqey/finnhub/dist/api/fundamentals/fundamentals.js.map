{"version":3,"file":"fundamentals.js","sourceRoot":"","sources":["../../../src/api/fundamentals/fundamentals.ts"],"names":[],"mappings":"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","sourcesContent":["import FinnhubAPI from \"../\";\nimport {\n  BasicFinancials,\n  BasicFinancialsRequest,\n  CompanyNews,\n  CompanyNewsRequest,\n  CompanyProfile2,\n  CompanyProfile2Request,\n  InsiderTransaction,\n  InsiderTransactionRequest,\n  MarketNews,\n  MarketNewsRequest,\n  NewsSentiment,\n  SymbolLookup,\n} from \"./interface\";\n\nclass Fundamentals {\n  public ctx: FinnhubAPI;\n\n  constructor(context: FinnhubAPI) {\n    this.ctx = context;\n  }\n\n  /**\n   * Symbol Lookup - https://finnhub.io/docs/api/symbol-search\n   * Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.\n   * @param query Query text can be symbol, name, isin, or cusip.\n   * @returns {SymbolLookup | null}\n   */\n  public symbolLookup = async (\n    query?: string,\n  ): Promise<SymbolLookup | null> => {\n    const token = this.ctx.token;\n    const params = {\n      q: query,\n      token,\n    };\n\n    try {\n      const symbolLookupResponse = await this.ctx.api.get(\"search\", {\n        method: \"GET\",\n        params,\n      });\n\n      const symbolLookup: SymbolLookup = symbolLookupResponse.data;\n      return symbolLookup;\n    } catch (error) {\n      console.log(\"error symbol lookup\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Company Profile 2 - https://finnhub.io/docs/api/company-profile2\n   * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of Company Profile.\n   * @param args @type {CompanyProfile2Request}\n   * @returns {CompanyProfile2 | null}\n   */\n  public companyProfile2 = async (\n    args: CompanyProfile2Request,\n  ): Promise<CompanyProfile2 | null> => {\n    const token = this.ctx.token;\n\n    // https://finnhub.io/api/v1/stock/profile2?symbol=AAPL&token=\n    const params = {\n      symbol: args.symbol,\n      isin: args.isin,\n      cusip: args.cusip,\n      token,\n    };\n\n    try {\n      const profile = await this.ctx.api.get(`stock/profile2`, {\n        method: \"GET\",\n        params,\n      });\n\n      const profileData: CompanyProfile2 = profile.data;\n\n      return profileData;\n    } catch (error) {\n      console.log(\"error getting company profile\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Market News - https://finnhub.io/docs/api/market-news\n   * Get latest market news.\n   * @param args @type {MarketNewsRequest}\n   * @returns {MarketNews | null}\n   */\n  public marketNews = async (\n    args: MarketNewsRequest,\n  ): Promise<MarketNews[] | null> => {\n    const token = this.ctx.token;\n\n    // https://finnhub.io/api/v1/news?category=general&token=\n    const params = {\n      category: args.category,\n      minId: args.minId,\n      token,\n    };\n\n    try {\n      const marketNewsRes = await this.ctx.api.get(`news`, {\n        method: \"GET\",\n        params,\n      });\n\n      const marketNews: MarketNews[] = marketNewsRes.data;\n      return marketNews;\n    } catch (error) {\n      console.log(\"error getting market news\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Company News - https://finnhub.io/docs/api/company-news\n   * List latest company news by symbol. This endpoint is only available for North American companies.\n   * @param args @type {CompanyNewsRequest}\n   * @returns {CompanyNews | null}\n   */\n  public companyNews = async (\n    args: CompanyNewsRequest,\n  ): Promise<CompanyNews[] | null> => {\n    const token = this.ctx.token;\n\n    // https://finnhub.io/api/v1/company-news?symbol=AAPL&from=2021-03-01&to=2021-03-09&token=\n    const params = {\n      symbol: args.symbol,\n      from: args.from.toISOString().split(\"T\")[0],\n      to: args.to.toISOString().split(\"T\")[0],\n      token,\n    };\n\n    try {\n      const companyNewsRes = await this.ctx.api.get(`company-news`, {\n        method: \"GET\",\n        params,\n      });\n\n      const companyNews: CompanyNews[] = companyNewsRes.data;\n      return companyNews;\n    } catch (error) {\n      console.log(\"error getting market news\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * News Sentiment - https://finnhub.io/docs/api/news-sentiment\n   * Get company's news sentiment and statistics. This endpoint is only available for US companies.\n   * @param symbol\n   * @returns {NewsSentiment | null}\n   */\n  public newsSentiment = async (\n    symbol: string,\n  ): Promise<NewsSentiment | null> => {\n    const token = this.ctx.token;\n\n    // https://finnhub.io/api/v1/news-sentiment?symbol=V&token=\n    const params = {\n      symbol,\n      token,\n    };\n\n    try {\n      const newsSentimentRes = await this.ctx.api.get(\"news-sentiment\", {\n        method: \"GET\",\n        params,\n      });\n\n      const newsSentiment = newsSentimentRes.data;\n      return newsSentiment;\n    } catch (error) {\n      console.log(\"error getting news sentiment\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Peers - https://finnhub.io/docs/api/company-peers\n   * Get company peers. Return a list of peers in the same country and GICS sub-industry\n   * @param symbol Symbol of the company\n   * @returns Array of peers' symbol.\n   */\n  public peers = async (symbol: string): Promise<string[] | null> => {\n    const token = this.ctx.token;\n\n    // https://finnhub.io/api/v1/stock/peers?symbol=AAPL&token=\n    const params = {\n      symbol,\n      token,\n    };\n\n    try {\n      const peers: string[] = (\n        await this.ctx.api.get(`stock/peers`, {\n          method: \"GET\",\n          params,\n        })\n      ).data;\n\n      return peers;\n    } catch (error) {\n      console.log(\"error getting peers\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Basic Financials - https://finnhub.io/docs/api/company-basic-financials\n   * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.\n   * @param args @type {BasicFinancialsRequest}\n   * @returns {BasicFinancials}\n   */\n  public basicFinancials = async (\n    args: BasicFinancialsRequest,\n  ): Promise<BasicFinancials | null> => {\n    const token = this.ctx.token;\n\n    const params = {\n      symbol: args.symbol,\n      metric: args.metric,\n      token,\n    };\n\n    try {\n      const basicFinancialsRes = await this.ctx.api.get(\"stock/metric\", {\n        method: \"GET\",\n        params,\n      });\n\n      return basicFinancialsRes.data;\n    } catch (error) {\n      console.log(\"error getting basic financials\", error && error.message);\n      return null;\n    }\n  };\n\n  /**\n   * Insider Transactions - https://finnhub.io/docs/api/insider-transactions\n   * Company insider transactions data sourced from Form 3,4,5. This endpoint only covers US companies at the moment.\n   * Limit to 100 transactions per API call.\n   * @param args @type {InsiderTransactionRequest}\n   * @returns {InsiderTransaction}\n   */\n  public insiderTransactions = async (\n    args: InsiderTransactionRequest,\n  ): Promise<InsiderTransaction | null> => {\n    const token = this.ctx.token;\n\n    const params = {\n      symbol: args.symbol,\n      from: args.from,\n      to: args.to,\n      token,\n    };\n\n    try {\n      const insiderTransactionRes = await this.ctx.api.get(\n        \"stock/insider-transactions\",\n        {\n          method: \"GET\",\n          params,\n        },\n      );\n\n      return insiderTransactionRes.data;\n    } catch (error) {\n      console.log(\"error getting insider transactions\", error && error.message);\n      return null;\n    }\n  };\n}\n\nexport default Fundamentals;\n"]}