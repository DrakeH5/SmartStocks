{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/api/index.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport { isEmpty } from \"lodash\";\n\nimport {\n  Candles,\n  MarketDataItem,\n  Quote,\n  RecommendationTrends,\n  Resolution,\n  TickData,\n} from \"../interface\";\nimport Fundamentals from \"./fundamentals/fundamentals\";\nimport {\n  BasicFinancials,\n  BasicFinancialsRequest,\n  CompanyNews,\n  CompanyNewsRequest,\n  CompanyProfile2,\n  CompanyProfile2Request,\n  InsiderTransaction,\n  InsiderTransactionRequest,\n  MarketNews,\n  MarketNewsRequest,\n  NewsSentiment,\n  SymbolLookup,\n} from \"./fundamentals/interface\";\nimport { getQuoteData } from \"./quote\";\nimport { GetRecommendationTrends } from \"./stockEstimates\";\nimport { getTickData } from \"./tick\";\nconst round = (num: number) => Math.round(num);\n\n/**\n * FinnhubAPI\n * @StockCandles Get candlestick data for stocks.\n * https://finnhub.io/docs/api#stock-candles\n *\n * @TickData Get historical tick data for US stocks from all 13 exchanges\n * https://finnhub.io/docs/api#stock-tick\n *\n * @Quote Get stocks quote price\n * https://finnhub.io/docs/api#quote\n *\n * @CompanyProfile2 Get symbol Company info\n * https://finnhub.io/docs/api/company-profile2\n *\n * @RecommendationTrends Get Recommendation Trends\n * https://finnhub.io/docs/api/recommendation-trends\n * @Peers Get peers for company\n * https://finnhub.io/docs/api/company-peers\n */\nexport class FinnhubAPI {\n  public token: string;\n\n  public api: AxiosInstance;\n\n  private fundamentalsApi: Fundamentals;\n\n  constructor(token?: string) {\n    this.api = axios.create({\n      baseURL: \"https://finnhub.io/api/v1\",\n    });\n    this.token = token\n      ? token\n      : (process && process.env && process.env.FINNHUB_KEY) || \"\";\n\n    this.fundamentalsApi = new Fundamentals(this);\n  }\n\n  /**\n   * Get candlestick data for stocks.\n   * @param symbol\n   * @param start\n   * @param end\n   * @param resolution\n   * https://finnhub.io/docs/api#stock-candles\n   */\n  public async getCandles(\n    symbol: string,\n    start: Date,\n    end: Date,\n    resolution: Resolution,\n  ): Promise<MarketDataItem[]> {\n    const token = this.token;\n    const to = end.getTime() / 1000;\n    const from = start.getTime() / 1000;\n\n    //  const url = `https://finnhub.io/api/v1/stock/candle?symbol=${symbol}&resolution=${range}&from=${from}&to=${to}&token=${FINNHUB_KEY}`\n    const params = {\n      to: round(to),\n      from: round(from),\n      symbol,\n      token,\n      resolution,\n    };\n\n    if (isNaN(from) || isNaN(to)) {\n      console.log(\"error with parameters\", { from, to });\n      return [];\n    }\n\n    try {\n      // TODO check lastime we pulled this symbol, else fetch it's data again\n      const candles = await this.api.get(`stock/candle`, {\n        method: \"GET\",\n        params,\n      });\n\n      const data: Candles = candles.data;\n\n      const closes = data.c;\n\n      const marketData = isEmpty(closes)\n        ? []\n        : data.c.map((cc, index) => {\n            const close = cc; // a.k.\n            const open = data.o[index];\n            const time = data.t[index];\n            const volume = data.v[index];\n            const high = data.h[index];\n            const low = data.l[index];\n            return {\n              close,\n              date: new Date(+time * 1000),\n              volume,\n              open,\n              high,\n              low,\n            };\n          });\n\n      return marketData;\n    } catch (error) {\n      console.log(\"error getting candles\", error && error.message);\n      return [];\n    }\n  }\n\n  /**\n   * TickData Get historical tick data for US stocks from all 13 exchanges\n   * https://finnhub.io/docs/api#stock-tick\n   * @param symbol\n   * @param date\n   */\n  public async getTick(symbol: string, date: Date): Promise<TickData[]> {\n    return getTickData({ symbol, date, context: this });\n  }\n\n  /**\n   * GetQuote\n   * Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time update.\n   * @param symbol\n   */\n  public async getQuote(symbol: string): Promise<Quote> {\n    return getQuoteData({ symbol, context: this });\n  }\n\n  /**\n   * Symbol Lookup\n   * Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.\n   * @param query Query text can be symbol, name, isin, or cusip\n   * @returns {SymbolLookup | null}\n   */\n  public async symbolLookup(query?: string): Promise<SymbolLookup | null> {\n    return this.fundamentalsApi.symbolLookup(query);\n  }\n\n  /**\n   * companyProfile2\n   * Get general information of a company\n   * https://finnhub.io/docs/api/company-profile2\n   * @param args @type {CompanyProfile2Request}\n   * @return {CompanyProfile2 | null}\n   */\n  public async companyProfile2(\n    args: CompanyProfile2Request,\n  ): Promise<CompanyProfile2 | null> {\n    return this.fundamentalsApi.companyProfile2(args);\n  }\n\n  /**\n   * Market News - https://finnhub.io/docs/api/market-news\n   * Get latest market news.\n   * @param args @type {MarketNewsRequest}\n   * @returns {MarketNews | null}\n   */\n  public async marketNews(\n    args: MarketNewsRequest,\n  ): Promise<MarketNews[] | null> {\n    return this.fundamentalsApi.marketNews(args);\n  }\n\n  /**\n   * Company News - https://finnhub.io/docs/api/company-news\n   * List latest company news by symbol. This endpoint is only available for North American companies.\n   * @param args @type {CompanyNewsRequest}\n   * @returns {CompanyNews | null}\n   */\n  public async companyNews(\n    args: CompanyNewsRequest,\n  ): Promise<CompanyNews[] | null> {\n    return this.fundamentalsApi.companyNews(args);\n  }\n\n  /**\n   * News Sentiment - https://finnhub.io/docs/api/news-sentiment\n   * Get company's news sentiment and statistics. This endpoint is only available for US companies.\n   * @param symbol\n   * @returns {NewsSentiment | null}\n   */\n  public async newsSentiment(symbol: string): Promise<NewsSentiment | null> {\n    return this.fundamentalsApi.newsSentiment(symbol);\n  }\n\n  /**\n   * GetRecommendationTrends\n   * Get general information of a company\n   * https://finnhub.io/docs/api/company-profile2\n   */\n  public async GetRecommendationTrends(\n    symbol: string,\n  ): Promise<RecommendationTrends[]> {\n    return GetRecommendationTrends({ symbol, context: this });\n  }\n\n  /**\n   * @deprecated - please use peers API\n   * GetPeers\n   * Get company peers. Return a list of peers in the same country and GICS sub-industry\n   * @param symbol\n   */\n  public async getPeers(symbol: string): Promise<string[] | null> {\n    return this.peers(symbol);\n  }\n\n  /**\n   * Peers - https://finnhub.io/docs/api/company-peers\n   * Get company peers. Return a list of peers in the same country and GICS sub-industry\n   * @param symbol Symbol of the company\n   * @returns Array of peers' symbol.\n   */\n  public async peers(symbol: string): Promise<string[] | null> {\n    return this.fundamentalsApi.peers(symbol);\n  }\n\n  /**\n   * Basic Financials - https://finnhub.io/docs/api/company-basic-financials\n   * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.\n   * @param args @type {BasicFinancialsRequest}\n   * @returns {BasicFinancials}\n   */\n  public async basicFinancials(\n    args: BasicFinancialsRequest,\n  ): Promise<BasicFinancials | null> {\n    return this.fundamentalsApi.basicFinancials(args);\n  }\n\n  /**\n   * Insider Transactions - https://finnhub.io/docs/api/insider-transactions\n   * Company insider transactions data sourced from Form 3,4,5. This endpoint only covers US companies at the moment.\n   * Limit to 100 transactions per API call.\n   * @param args @type {InsiderTransactionRequest}\n   * @returns {InsiderTransaction}\n   */\n  public async insiderTransactions(\n    args: InsiderTransactionRequest,\n  ): Promise<InsiderTransaction | null> {\n    return this.fundamentalsApi.insiderTransactions(args);\n  }\n}\n\nexport default FinnhubAPI;\n"]}